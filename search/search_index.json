{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Drone Tutorial \u00b6 Highlighting \u00b6 REMOVE THE SECTION BELOW AFTER TUTORIAL IS COMPLETE. Deleted added one a single Keys \u00b6 Cmd + Alt + Del or Ctrl + Alt + Del Smart Symbols \u00b6 Trademark\u2122 Copyright\u00a9 Mkdocs Info \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. includes/ # All include files will here, the includes files will can be added using Extensions \u00b6 kind : Pipeline type : Docker name : default steps : - name : say hello image : busybox commands : - echo \"Hello World\" Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Important Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Theme \u00b6 Material for MkDocs --8\u2190\u200b \"includes/abbrevations.md\"","title":"Overview"},{"location":"#welcome-to-drone-tutorial","text":"","title":"Welcome to Drone Tutorial"},{"location":"#highlighting","text":"REMOVE THE SECTION BELOW AFTER TUTORIAL IS COMPLETE. Deleted added one a single","title":"Highlighting"},{"location":"#keys","text":"Cmd + Alt + Del or Ctrl + Alt + Del","title":"Keys"},{"location":"#smart-symbols","text":"Trademark\u2122 Copyright\u00a9","title":"Smart Symbols"},{"location":"#mkdocs-info","text":"For full documentation visit mkdocs.org .","title":"Mkdocs Info"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. includes/ # All include files will here, the includes files will can be added using","title":"Project layout"},{"location":"#extensions","text":"kind : Pipeline type : Docker name : default steps : - name : say hello image : busybox commands : - echo \"Hello World\" Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Important Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Extensions"},{"location":"#theme","text":"Material for MkDocs --8\u2190\u200b \"includes/abbrevations.md\"","title":"Theme"},{"location":"clean-up/","text":"TODO","title":"Clean Up"},{"location":"drone-desktop/","text":"Overview \u00b6 By the end of this chapter you will be able to, Understand the structure of .drone.yml Create your first Drone pipeline Run your Drone pipeline using drone CLI Run your drone pipeline using Drone Desktop TODO Build and push a container image to local container registry Using environment variables with pipelines Using secrets with pipelines Understanding Plugins and Services Mounting Volumes from the Docker host Ensure Environment \u00b6 Before getting started let us ensure we have the requried tools on our path Drone \u00b6 drone --version The command should show an output like v1.5.0 . Docker \u00b6 docker --version The command should show an output like Docker version 20.10.16, build aa7e414 Your first Pipeline \u00b6 In order get the feel of drone let us run create and run our very first pipeline. Navigate to work folder mkdir -p $PROJECT_HOME /work/first-pipeline cd $PROJECT_HOME /work/first-pipeline Create file .drone.yml with the following content, .drone.yml kind : pipeline type : docker name : default steps : - name : say hello image : busybox commands : - echo 'Hello World' Let us run our first pipeline, drone exec The command should run our pipeline and shown an output like, [say hello:0] + echo 'Hello World' [say hello:1] Hello World Congratulations! . You have successfully run your first pipeline. Pipeline steps are run sequentially. Let us add another step to our pipeline as shown, .drone.yml kind : pipeline type : docker name : default steps : - name : say hello image : busybox commands : - echo 'Hello World' - name : good bye image : busybox commands : - echo 'Good bye' Try running the drone exec command again to see the output as shown, [say hello:0] + echo 'Hello World' [say hello:1] Hello World [good bye:0] + echo 'Good bye' [good bye:1] Good bye Trusted mode \u00b6 Trusted mode instructs drone to run in trusted mode typically with extra privileges. When to use trusted mode ? Lets take an example of building and pushing our application as a container image to local registry. In order to do that we need: An application, with Dockerfile to build the container image A local container registry, where the built image will be pushed As part of the tutorial we have an $TUTORIAL_HOME/apps folder that has various exercise sources/demos, that we will be using through out this tutorial. For this exercise we will be using $TUTORIAL_HOME/apps/hello-go . Let us navigate to that folder, cd $TUTORIAL_HOME /apps/hello-go Deploy Local Container Registry \u00b6 Before we execute the pipeline we need to start a local container registry , run the following command to start one locally, docker run -d -p 5001 :5000 --name registry registry:2 You can verify if the registry is started using the docker ps command. docker ps --filter name = registry The command should return an output like, CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 673c375aca50 registry:2 \"/entrypoint.sh /etc\u2026\" 41 minutes ago Up 41 minutes 0 .0.0.0:5001->5000/tcp registry Pipeline \u00b6 Let us analyse the Drone pipeline of our app, .drone.yml kind : pipeline type : docker name : default steps : - name : build-image image : plugins/docker settings : repo : localhost:5001/example/hello-go insecure : true volumes : - name : docker-sock path : /var/run/docker.sock volumes : - name : docker-sock host : path : /var/run/docker.sock It is a simple one step pipeline that builds the go application using the Dockerfile : Dockerfile #syntax=docker/dockerfile:1.3-labs FROM golang:1.18-alpine ARG TARGETARCH ENV CGO_ENABLED = 0 RUN apk add --update WORKDIR /build COPY . . RUN --mount = type = cache,target = /go/pkg/mod \\ --mount = type = cache,target = /root/.cache/go-build \\ GOOS = linux GOARCH = ${ TARGETARCH } go build -o server server.go CMD [ \"/build/server\" ] And pushes the image to local container registry localhost:5001 as localhost:5001/example/hello-go . Note The docker build is done using Drone Plugins , we will talk more about it in upcoming chapters TODO: Add more explanation But to push to the local container registry we need the handle to the docker socket of the host which is usually the file /var/run/docker.sock . We add the handle in our pipeline using the volume mounts. As we are mounting the host file into the container its expected to instruct Drone to run in trusted mode to add extra privileges to the step containers. Build Application \u00b6 Build and push the image by running the command, drone exec --trusted Once the pipeline is successful, you can test the built image by running the following command, docker run --rm -p8080:8080 localhost:5001/example/hello-go Now doing a curl localhost:8080 should return a response Hello, World! . Plugins When we built the container image we used image called plugins/docker with custom settings what is that? It is a Drone Plugin . Plugins are pre-defined set of commands which is packed as a container image. Plugins are reusable and the parameters to the plugin commands are passed using settings block. Please check Drone Plugins for a list of available plugins. Drone Desktop \u00b6 Until now we saw how to execute the pipelines from command line. Drone Desktop is a Docker Desktop Extension that allows you import and run pipelines from within Docker Desktop. Install Drone Desktop Extension \u00b6 # volume used by Drone Desktop docker volume create drone-desktop-data docker extension install docker.io/kameshsampath/drone-desktop-extension:v1.0.3 If your install is successful you should see the Drone Desktop extension in the Docker Desktop as shown, Import Pipelines \u00b6 You can search and import pipelines into Drone Desktop, Execute Pipeline \u00b6 TODO: Update this section once we have the feature added to Drone Desktop Including and Excluding Steps \u00b6 Drone allows you to include and exclude steps of the pipeline at execution time. Let us navigate to the exercise folder, cd $TUTORIAL_HOME /apps/greeting Let us analyse the Drone pipeline that we will use for this exercise, it is simple greeter application that says hello world in multiple languages. .drone.yml kind : pipeline type : docker name : default steps : - name : english image : alpine commands : - echo hello world - name : french image : alpine commands : - echo bonjour monde - name : hindi image : alpine commands : - echo \u0928\u092e\u0938\u094d\u0924\u0947 \u0926\u0941\u0928\u093f\u092f\u093e - name : japanese image : alpine commands : - echo \u3053\u3093\u306b\u3061\u306f\u4e16\u754c Include Steps \u00b6 Let us assume that we want to greet in English and French i.e. run only the steps english and french . To do that run the following command, drone exec --include = english --include = french A successful run will shown an output like, [english:0] + echo hello world [english:1] hello world [french:0] + echo bonjour monde [french:1] bonjour monde Exclude Steps \u00b6 Excluding steps works in a similar way as that of include but with exclude we specify the steps to be excluded. Say we want to exclude hindi and japanese steps from our pipeline run, to do that run the drone command as shown, drone exec --exclude = hindi --exclude = japanese A successful run will shown an output like, [english:0] + echo hello world [english:1] hello world [french:0] + echo bonjour monde [french:1] bonjour monde Injecting Environment Variables \u00b6 In many cases we might need to load few settings from environment variables or files, drone provides an option called --env-file that allows to load the environment variable(s) which can then be used within step containers. Let us navigate to the exercise folder, cd $TUTORIAL_HOME /apps/env-greeting Let us analyse the pipeline file, .drone.yml kind : pipeline type : docker name : default steps : - name : english image : alpine commands : - echo $GREETING_MESSAGE Loading Environment Variables \u00b6 As you notice the pipeline step english prints the value ${GREETING_MESSAGE} . The variable ${GREETING_MESSAGE} loaded from the file my-env . my-env GREETING_MESSAGE=Hello, World! Run Pipeline \u00b6 In order for the steps to use ${GREETING_MESSAGE} as environment variable, we use the --env-file option of the drone command to load my-env into the step container. Now run the pipeline, drone exec --env-file = my-env The pipeline execution will show an output like, [english:0] + echo $GREETING_MESSAGE [english:1] Hello, World! Injecting Secrets \u00b6 Drone also allows to load few settings from secrets, drone provides an option called --secret-file with which we can load the secrets as environment variables and use them in our steps. Note Secrets are masked in pipeline logs Navigate to the exercise folder, cd $TUTORIAL_HOME /apps/using-secrets Let us analyse the pipeline file, .drone.yml kind : pipeline type : docker name : default steps : - name : what is today? image : postgres:14.4-alpine commands : - sleep 10 - psql --host=$PGHOST --port=$PGPORT -w -c 'SELECT NOW() as TODAY;' environment : PGHOST : postgres PGPORT : 5432 PGDATABASE : from_secret : postgres_db PGUSER : from_secret : postgres_user PGPASSWORD : from_secret : postgres_password PGDATABASE : from_secret : postgres_db services : - name : postgres image : postgres:14.4-alpine environment : POSTGRES_DB : from_secret : postgres_db POSTGRES_USER : from_secret : postgres_user POSTGRES_PASSWORD : from_secret : postgres_password As you have noted from the highlighted line, we inject the environment variable called PGDATABASE with value from secret postgres_db using a special drone attribute named from_secret .The from_secret attribute value maps to the secret key that gets loaded using --secret-file option. Loading Secrets \u00b6 As you notice the pipeline step what is today? runs a psql command that selects the current date using the SQL query SELECT NOW() . To psql command expects the environment variables: PGHOST PGPORT PGDATABASE PGUSER PGPASSWORD We define PGHOST , PGPORT as plain text values in the environment block, whereas PGDATABASE , PGUSER , PGPASSWORD are loaded from the secret file secret.txt . secret.txt postgres_db=demodb postgres_user=postgress postgres_password=pa55Word! Run Pipeline \u00b6 Now run the pipeline, drone exec --secret-file = secret.txt The pipeline execution will show an output like ( output trimmed for brevity), ... [what is today?:1] + psql --host=$PGHOST --port=$PGPORT -w -c 'SELECT NOW() as TODAY;' [what is today?:2] today [what is today?:3] ------------------------------- [what is today?:4] 2022-07-19 06:48:05.497789+00 [what is today?:5] (1 row) [what is today?:6] ... Important For this demo we add the secret.txt git, but for production scenarios make sure the file name or pattern is added to .gitingore Multiple Pipelines or Stages \u00b6 A drone pipeline .drone.yml can have multiple pipelines a.k.a stages . EAch stage is its own YAML document. The drone command has an option called --pipeline that allows you to invoke the required stage, Let us navigate to the exercise folder, cd $TUTORIAL_HOME /apps/multiple-stages As you see form the pipeline file, it has four stages namely english,french,hindi and japanese . .drone.yml kind : pipeline type : docker name : english steps : - name : greeting image : alpine commands : - echo hello world --- kind : pipeline type : docker name : french steps : - name : greeting image : alpine commands : - echo bonjour monde --- kind : pipeline type : docker name : hindi steps : - name : greeting image : alpine commands : - echo \u0928\u092e\u0938\u094d\u0924\u0947 \u0926\u0941\u0928\u093f\u092f\u093e --- kind : pipeline type : docker name : japanese steps : - name : greeting image : alpine commands : - echo \u3053\u3093\u306b\u3061\u306f\u4e16\u754c Run a Stage \u00b6 Let us say you want to run the japanese stage of the pipeline, drone exec --pipeline = japanese The command should shown an output like, [greeting:0] + echo \u3053\u3093\u306b\u3061\u306f\u4e16\u754c [greeting:1] \u3053\u3093\u306b\u3061\u306f\u4e16\u754c Services As you noticed we used new configuration block in the pipline called services . Services are detached containers that are not part of your step but will be used by steps. These containers are killed automatically after the pipeline execution ends. Exchange Information Between Steps \u00b6 The pipeline does not run independently, each step produces some output that may be used by the next step(s). The easiest way to exchange information between steps is using Volume mounts, Navigate to the exercise folder $TUTORIAL_HOME/apps/exchange-info , Let us check the pipeline file, .drone.yml kind : pipeline type : docker name : default steps : - name : store-message image : busybox commands : - echo 'Hello, World!' > /data/message.txt volumes : - name : data-vol path : /data - name : show-message image : busybox commands : - cat /data/message.txt volumes : - name : data-vol path : /data volumes : - name : data-vol temp : {} As you noticed both the steps store-message and show-message mounts a Volume on same path /data . The store-message writes an output to the file /data/message.txt which is then read and displayed by the next step show-message . Run the pipeline to see it in action, drone exec A successful pipeline execution will show the following output, [store-message:0] + echo 'Hello, World!' > /data/message.txt [show-message:0] + cat /data/message.txt [show-message:1] Hello, World! Navigate back to $TUTORIAL_HOME before starting to work on the next set of exercises. cd $TUTORIAL_HOME","title":"Drone Desktop"},{"location":"drone-desktop/#overview","text":"By the end of this chapter you will be able to, Understand the structure of .drone.yml Create your first Drone pipeline Run your Drone pipeline using drone CLI Run your drone pipeline using Drone Desktop TODO Build and push a container image to local container registry Using environment variables with pipelines Using secrets with pipelines Understanding Plugins and Services Mounting Volumes from the Docker host","title":"Overview"},{"location":"drone-desktop/#ensure-environment","text":"Before getting started let us ensure we have the requried tools on our path","title":"Ensure Environment"},{"location":"drone-desktop/#drone","text":"drone --version The command should show an output like v1.5.0 .","title":"Drone"},{"location":"drone-desktop/#docker","text":"docker --version The command should show an output like Docker version 20.10.16, build aa7e414","title":"Docker"},{"location":"drone-desktop/#your-first-pipeline","text":"In order get the feel of drone let us run create and run our very first pipeline. Navigate to work folder mkdir -p $PROJECT_HOME /work/first-pipeline cd $PROJECT_HOME /work/first-pipeline Create file .drone.yml with the following content, .drone.yml kind : pipeline type : docker name : default steps : - name : say hello image : busybox commands : - echo 'Hello World' Let us run our first pipeline, drone exec The command should run our pipeline and shown an output like, [say hello:0] + echo 'Hello World' [say hello:1] Hello World Congratulations! . You have successfully run your first pipeline. Pipeline steps are run sequentially. Let us add another step to our pipeline as shown, .drone.yml kind : pipeline type : docker name : default steps : - name : say hello image : busybox commands : - echo 'Hello World' - name : good bye image : busybox commands : - echo 'Good bye' Try running the drone exec command again to see the output as shown, [say hello:0] + echo 'Hello World' [say hello:1] Hello World [good bye:0] + echo 'Good bye' [good bye:1] Good bye","title":"Your first Pipeline"},{"location":"drone-desktop/#trusted-mode","text":"Trusted mode instructs drone to run in trusted mode typically with extra privileges. When to use trusted mode ? Lets take an example of building and pushing our application as a container image to local registry. In order to do that we need: An application, with Dockerfile to build the container image A local container registry, where the built image will be pushed As part of the tutorial we have an $TUTORIAL_HOME/apps folder that has various exercise sources/demos, that we will be using through out this tutorial. For this exercise we will be using $TUTORIAL_HOME/apps/hello-go . Let us navigate to that folder, cd $TUTORIAL_HOME /apps/hello-go","title":"Trusted mode"},{"location":"drone-desktop/#deploy-local-container-registry","text":"Before we execute the pipeline we need to start a local container registry , run the following command to start one locally, docker run -d -p 5001 :5000 --name registry registry:2 You can verify if the registry is started using the docker ps command. docker ps --filter name = registry The command should return an output like, CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 673c375aca50 registry:2 \"/entrypoint.sh /etc\u2026\" 41 minutes ago Up 41 minutes 0 .0.0.0:5001->5000/tcp registry","title":"Deploy Local Container Registry"},{"location":"drone-desktop/#pipeline","text":"Let us analyse the Drone pipeline of our app, .drone.yml kind : pipeline type : docker name : default steps : - name : build-image image : plugins/docker settings : repo : localhost:5001/example/hello-go insecure : true volumes : - name : docker-sock path : /var/run/docker.sock volumes : - name : docker-sock host : path : /var/run/docker.sock It is a simple one step pipeline that builds the go application using the Dockerfile : Dockerfile #syntax=docker/dockerfile:1.3-labs FROM golang:1.18-alpine ARG TARGETARCH ENV CGO_ENABLED = 0 RUN apk add --update WORKDIR /build COPY . . RUN --mount = type = cache,target = /go/pkg/mod \\ --mount = type = cache,target = /root/.cache/go-build \\ GOOS = linux GOARCH = ${ TARGETARCH } go build -o server server.go CMD [ \"/build/server\" ] And pushes the image to local container registry localhost:5001 as localhost:5001/example/hello-go . Note The docker build is done using Drone Plugins , we will talk more about it in upcoming chapters TODO: Add more explanation But to push to the local container registry we need the handle to the docker socket of the host which is usually the file /var/run/docker.sock . We add the handle in our pipeline using the volume mounts. As we are mounting the host file into the container its expected to instruct Drone to run in trusted mode to add extra privileges to the step containers.","title":"Pipeline"},{"location":"drone-desktop/#build-application","text":"Build and push the image by running the command, drone exec --trusted Once the pipeline is successful, you can test the built image by running the following command, docker run --rm -p8080:8080 localhost:5001/example/hello-go Now doing a curl localhost:8080 should return a response Hello, World! . Plugins When we built the container image we used image called plugins/docker with custom settings what is that? It is a Drone Plugin . Plugins are pre-defined set of commands which is packed as a container image. Plugins are reusable and the parameters to the plugin commands are passed using settings block. Please check Drone Plugins for a list of available plugins.","title":"Build Application"},{"location":"drone-desktop/#drone-desktop","text":"Until now we saw how to execute the pipelines from command line. Drone Desktop is a Docker Desktop Extension that allows you import and run pipelines from within Docker Desktop.","title":"Drone Desktop"},{"location":"drone-desktop/#install-drone-desktop-extension","text":"# volume used by Drone Desktop docker volume create drone-desktop-data docker extension install docker.io/kameshsampath/drone-desktop-extension:v1.0.3 If your install is successful you should see the Drone Desktop extension in the Docker Desktop as shown,","title":"Install Drone Desktop Extension"},{"location":"drone-desktop/#import-pipelines","text":"You can search and import pipelines into Drone Desktop,","title":"Import Pipelines"},{"location":"drone-desktop/#execute-pipeline","text":"TODO: Update this section once we have the feature added to Drone Desktop","title":"Execute Pipeline"},{"location":"drone-desktop/#including-and-excluding-steps","text":"Drone allows you to include and exclude steps of the pipeline at execution time. Let us navigate to the exercise folder, cd $TUTORIAL_HOME /apps/greeting Let us analyse the Drone pipeline that we will use for this exercise, it is simple greeter application that says hello world in multiple languages. .drone.yml kind : pipeline type : docker name : default steps : - name : english image : alpine commands : - echo hello world - name : french image : alpine commands : - echo bonjour monde - name : hindi image : alpine commands : - echo \u0928\u092e\u0938\u094d\u0924\u0947 \u0926\u0941\u0928\u093f\u092f\u093e - name : japanese image : alpine commands : - echo \u3053\u3093\u306b\u3061\u306f\u4e16\u754c","title":"Including and Excluding Steps"},{"location":"drone-desktop/#include-steps","text":"Let us assume that we want to greet in English and French i.e. run only the steps english and french . To do that run the following command, drone exec --include = english --include = french A successful run will shown an output like, [english:0] + echo hello world [english:1] hello world [french:0] + echo bonjour monde [french:1] bonjour monde","title":"Include Steps"},{"location":"drone-desktop/#exclude-steps","text":"Excluding steps works in a similar way as that of include but with exclude we specify the steps to be excluded. Say we want to exclude hindi and japanese steps from our pipeline run, to do that run the drone command as shown, drone exec --exclude = hindi --exclude = japanese A successful run will shown an output like, [english:0] + echo hello world [english:1] hello world [french:0] + echo bonjour monde [french:1] bonjour monde","title":"Exclude Steps"},{"location":"drone-desktop/#injecting-environment-variables","text":"In many cases we might need to load few settings from environment variables or files, drone provides an option called --env-file that allows to load the environment variable(s) which can then be used within step containers. Let us navigate to the exercise folder, cd $TUTORIAL_HOME /apps/env-greeting Let us analyse the pipeline file, .drone.yml kind : pipeline type : docker name : default steps : - name : english image : alpine commands : - echo $GREETING_MESSAGE","title":"Injecting Environment Variables"},{"location":"drone-desktop/#loading-environment-variables","text":"As you notice the pipeline step english prints the value ${GREETING_MESSAGE} . The variable ${GREETING_MESSAGE} loaded from the file my-env . my-env GREETING_MESSAGE=Hello, World!","title":"Loading Environment Variables"},{"location":"drone-desktop/#run-pipeline","text":"In order for the steps to use ${GREETING_MESSAGE} as environment variable, we use the --env-file option of the drone command to load my-env into the step container. Now run the pipeline, drone exec --env-file = my-env The pipeline execution will show an output like, [english:0] + echo $GREETING_MESSAGE [english:1] Hello, World!","title":"Run Pipeline"},{"location":"drone-desktop/#injecting-secrets","text":"Drone also allows to load few settings from secrets, drone provides an option called --secret-file with which we can load the secrets as environment variables and use them in our steps. Note Secrets are masked in pipeline logs Navigate to the exercise folder, cd $TUTORIAL_HOME /apps/using-secrets Let us analyse the pipeline file, .drone.yml kind : pipeline type : docker name : default steps : - name : what is today? image : postgres:14.4-alpine commands : - sleep 10 - psql --host=$PGHOST --port=$PGPORT -w -c 'SELECT NOW() as TODAY;' environment : PGHOST : postgres PGPORT : 5432 PGDATABASE : from_secret : postgres_db PGUSER : from_secret : postgres_user PGPASSWORD : from_secret : postgres_password PGDATABASE : from_secret : postgres_db services : - name : postgres image : postgres:14.4-alpine environment : POSTGRES_DB : from_secret : postgres_db POSTGRES_USER : from_secret : postgres_user POSTGRES_PASSWORD : from_secret : postgres_password As you have noted from the highlighted line, we inject the environment variable called PGDATABASE with value from secret postgres_db using a special drone attribute named from_secret .The from_secret attribute value maps to the secret key that gets loaded using --secret-file option.","title":"Injecting Secrets"},{"location":"drone-desktop/#loading-secrets","text":"As you notice the pipeline step what is today? runs a psql command that selects the current date using the SQL query SELECT NOW() . To psql command expects the environment variables: PGHOST PGPORT PGDATABASE PGUSER PGPASSWORD We define PGHOST , PGPORT as plain text values in the environment block, whereas PGDATABASE , PGUSER , PGPASSWORD are loaded from the secret file secret.txt . secret.txt postgres_db=demodb postgres_user=postgress postgres_password=pa55Word!","title":"Loading Secrets"},{"location":"drone-desktop/#run-pipeline_1","text":"Now run the pipeline, drone exec --secret-file = secret.txt The pipeline execution will show an output like ( output trimmed for brevity), ... [what is today?:1] + psql --host=$PGHOST --port=$PGPORT -w -c 'SELECT NOW() as TODAY;' [what is today?:2] today [what is today?:3] ------------------------------- [what is today?:4] 2022-07-19 06:48:05.497789+00 [what is today?:5] (1 row) [what is today?:6] ... Important For this demo we add the secret.txt git, but for production scenarios make sure the file name or pattern is added to .gitingore","title":"Run Pipeline"},{"location":"drone-desktop/#multiple-pipelines-or-stages","text":"A drone pipeline .drone.yml can have multiple pipelines a.k.a stages . EAch stage is its own YAML document. The drone command has an option called --pipeline that allows you to invoke the required stage, Let us navigate to the exercise folder, cd $TUTORIAL_HOME /apps/multiple-stages As you see form the pipeline file, it has four stages namely english,french,hindi and japanese . .drone.yml kind : pipeline type : docker name : english steps : - name : greeting image : alpine commands : - echo hello world --- kind : pipeline type : docker name : french steps : - name : greeting image : alpine commands : - echo bonjour monde --- kind : pipeline type : docker name : hindi steps : - name : greeting image : alpine commands : - echo \u0928\u092e\u0938\u094d\u0924\u0947 \u0926\u0941\u0928\u093f\u092f\u093e --- kind : pipeline type : docker name : japanese steps : - name : greeting image : alpine commands : - echo \u3053\u3093\u306b\u3061\u306f\u4e16\u754c","title":"Multiple Pipelines or Stages"},{"location":"drone-desktop/#run-a-stage","text":"Let us say you want to run the japanese stage of the pipeline, drone exec --pipeline = japanese The command should shown an output like, [greeting:0] + echo \u3053\u3093\u306b\u3061\u306f\u4e16\u754c [greeting:1] \u3053\u3093\u306b\u3061\u306f\u4e16\u754c Services As you noticed we used new configuration block in the pipline called services . Services are detached containers that are not part of your step but will be used by steps. These containers are killed automatically after the pipeline execution ends.","title":"Run a Stage"},{"location":"drone-desktop/#exchange-information-between-steps","text":"The pipeline does not run independently, each step produces some output that may be used by the next step(s). The easiest way to exchange information between steps is using Volume mounts, Navigate to the exercise folder $TUTORIAL_HOME/apps/exchange-info , Let us check the pipeline file, .drone.yml kind : pipeline type : docker name : default steps : - name : store-message image : busybox commands : - echo 'Hello, World!' > /data/message.txt volumes : - name : data-vol path : /data - name : show-message image : busybox commands : - cat /data/message.txt volumes : - name : data-vol path : /data volumes : - name : data-vol temp : {} As you noticed both the steps store-message and show-message mounts a Volume on same path /data . The store-message writes an output to the file /data/message.txt which is then read and displayed by the next step show-message . Run the pipeline to see it in action, drone exec A successful pipeline execution will show the following output, [store-message:0] + echo 'Hello, World!' > /data/message.txt [show-message:0] + cat /data/message.txt [show-message:1] Hello, World! Navigate back to $TUTORIAL_HOME before starting to work on the next set of exercises. cd $TUTORIAL_HOME","title":"Exchange Information Between Steps"},{"location":"drone-server/","text":"TODO All exercises related to Drone Server","title":"Drone Server"},{"location":"env-setup/","text":"","title":"Environment Setup"},{"location":"tools-and-sources/","text":"Download Tools \u00b6 We will be using the following tools as part of the tutorial. Please have them installed and configured before proceeding further. Tool macos linux windows Docker Desktop v4.8+ Install Install Install Kind brew install kind Install choco install kind Drone CLI brew tap drone/drone && brew install drone Install Install helm brew install helm Install choco install kubernetes-helm yq v4 brew install yq Install Install kubectl brew install kubectl Download choco install kubernetes-cli kustomize brew install kustomize Download choco install kustomize stern brew install stern Download Download Download the Sources \u00b6 Let us clone the tutorial sources, git clone https://github.com/kameshsampath/drone-tutorial cd drone-tutorial For rest of the tutorial we will call our tutorial folder as $TUTORIAL_HOME , export TUTORIAL_HOME = \" ${ PWD } \"","title":"Tools and Sources"},{"location":"tools-and-sources/#download-tools","text":"We will be using the following tools as part of the tutorial. Please have them installed and configured before proceeding further. Tool macos linux windows Docker Desktop v4.8+ Install Install Install Kind brew install kind Install choco install kind Drone CLI brew tap drone/drone && brew install drone Install Install helm brew install helm Install choco install kubernetes-helm yq v4 brew install yq Install Install kubectl brew install kubectl Download choco install kubernetes-cli kustomize brew install kustomize Download choco install kustomize stern brew install stern Download Download","title":"Download Tools"},{"location":"tools-and-sources/#download-the-sources","text":"Let us clone the tutorial sources, git clone https://github.com/kameshsampath/drone-tutorial cd drone-tutorial For rest of the tutorial we will call our tutorial folder as $TUTORIAL_HOME , export TUTORIAL_HOME = \" ${ PWD } \"","title":"Download the Sources"},{"location":"troubleshooting/","text":"","title":"Troubleshooting"}]}